// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package consul

import (
	"github.com/hashicorp/consul/api"
	"sync"
)

// Ensure, that servicerMock does implement servicer.
// If this is not the case, regenerate this file with moq.
var _ servicer = &servicerMock{}

// servicerMock is a mock implementation of servicer.
//
//	func TestSomethingThatUsesservicer(t *testing.T) {
//
//		// make and configure a mocked servicer
//		mockedservicer := &servicerMock{
//			ServiceMultipleTagsFunc: func(s string, strings []string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
//				panic("mock out the ServiceMultipleTags method")
//			},
//		}
//
//		// use mockedservicer in code that requires servicer
//		// and then make assertions.
//
//	}
type servicerMock struct {
	// ServiceMultipleTagsFunc mocks the ServiceMultipleTags method.
	ServiceMultipleTagsFunc func(s string, strings []string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error)

	// calls tracks calls to the methods.
	calls struct {
		// ServiceMultipleTags holds details about calls to the ServiceMultipleTags method.
		ServiceMultipleTags []struct {
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
			// B is the b argument value.
			B bool
			// QueryOptions is the queryOptions argument value.
			QueryOptions *api.QueryOptions
		}
	}
	lockServiceMultipleTags sync.RWMutex
}

// ServiceMultipleTags calls ServiceMultipleTagsFunc.
func (mock *servicerMock) ServiceMultipleTags(s string, strings []string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	if mock.ServiceMultipleTagsFunc == nil {
		panic("servicerMock.ServiceMultipleTagsFunc: method is nil but servicer.ServiceMultipleTags was just called")
	}
	callInfo := struct {
		S            string
		Strings      []string
		B            bool
		QueryOptions *api.QueryOptions
	}{
		S:            s,
		Strings:      strings,
		B:            b,
		QueryOptions: queryOptions,
	}
	mock.lockServiceMultipleTags.Lock()
	mock.calls.ServiceMultipleTags = append(mock.calls.ServiceMultipleTags, callInfo)
	mock.lockServiceMultipleTags.Unlock()
	return mock.ServiceMultipleTagsFunc(s, strings, b, queryOptions)
}

// ServiceMultipleTagsCalls gets all the calls that were made to ServiceMultipleTags.
// Check the length with:
//
//	len(mockedservicer.ServiceMultipleTagsCalls())
func (mock *servicerMock) ServiceMultipleTagsCalls() []struct {
	S            string
	Strings      []string
	B            bool
	QueryOptions *api.QueryOptions
} {
	var calls []struct {
		S            string
		Strings      []string
		B            bool
		QueryOptions *api.QueryOptions
	}
	mock.lockServiceMultipleTags.RLock()
	calls = mock.calls.ServiceMultipleTags
	mock.lockServiceMultipleTags.RUnlock()
	return calls
}
